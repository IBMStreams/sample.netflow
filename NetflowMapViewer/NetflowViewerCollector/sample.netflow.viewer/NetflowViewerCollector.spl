/*
** Copyright (C) 2015, 2020 International Business Machines Corporation
** All Rights Reserved
*/

namespace sample.netflow.viewer;

use com.ibm.streamsx.network.ipv4::* ;
use com.ibm.streamsx.network.source::* ;
use com.ibm.streamsx.network.parse::* ;
use com.ibm.streamsx.inet.http::HTTPRequest;
use com.ibm.streamsx.inet.util::Serializer;

/* helper function to create custom metrics during operator initialization */
stateful boolean createMyMetrics() {
	createCustomMetric("nInputTuplesQueued", "nInputTuplesQueued: Number of tuple waiting for transmission", Sys.Gauge, 0l);
	createCustomMetric("nInputTuplesDropped", "nInputTuplesDropped: Number of dropped tuples", Sys.Counter, 0l);
	return true;
}

composite NetflowViewerCollector {
	param
		expression<float64> $aggretationTime :   (float64)getSubmissionTimeValue("aggretationTime", "5.0") ;
		expression<rstring> $networkInterface :           getSubmissionTimeValue("networkInterface", "eth0") ;
		expression<rstring> $pcapFilename:                getSubmissionTimeValue("pcapFilename", "/etc/sample_netflow9_new.pcap" );
		expression<float64> $period:             (float64)getSubmissionTimeValue("period", "3.0");
		expression<rstring> $url:                         getSubmissionTimeValue(
			"url", "https://streams-endpoint-monitor-zen.apps.cp4dstreams2.os.fyre.ibm.com/Netflow/InjectedTuples/ports/output/0/inject") ;
		expression<uint32>  $iterateTypeListCount:(uint32)getSubmissionTimeValue("iterateTypeListCount", "10");
		expression<boolean> $runOnce:            (boolean)getSubmissionTimeValue("runOnce", "false") ; //for debugging purposes run only one pcap file
		expression<float64> $waitBerforeTransmissionRepetition:(float64)getSubmissionTimeValue("waitBerforeTransmissionRepetition", "1.5");

		//The binary size of the FlowType is 33 bytes -> the maximum size of an transmission unit is approximately 495000 bytes
		expression<int32> $transmissionBurstTupleCount: 15000;
		// the maxQueueSize must be adapted to the available memory it stores max. transmission unit size * maxQueueSize = 4,950,000,000
		expression<int32>   $maxQueueSize:         (int32)getSubmissionTimeValue("maxQueueSize", "10000");

	type
		PacketType = 
			float64 captureTime, // time that packet was captured, in seconds since Unix epoch
			uint32 netflowSource, // IP source address of Netflow message
			blob netflowMessage ; // the Netflow message from a packet, excluding all network headers
		
		FlowType = 
			uint32 time_stamp,
			uint32 srcAddress, // IPv4 address of source of flow
			uint16 srcPort, // UDP/TCP port of source of flow
			uint32 dstAddress, // IPv4 address of destination of flow
			uint16 dstPort, // UDP/TCP port of destination of flow
			uint8 flowProtocol, // IP protocol number of flow, usually 1 for "icmp", 6 for "tcp", or 17 for "udp"
			float64 flowDuration, // duration of flow, in seconds
			uint64 flowSize ; // size of flow, in bytes

		TransferType = list<FlowType> flowItems;
		
		HTTPResponseType = //The http response type carries information about the outcome of the requests
			uint64 sequence,
			rstring err,
			rstring status,
			int32 stat,
			rstring contentEncoding,
			rstring contentType,
			list<rstring> responseHeader,
			rstring respData;

	graph

		/* Trigger the file read operation */
		stream<rstring pcapFilename> PcapFileStream as O = Beacon() {
			param
				period : $period;
			output
				O : pcapFilename = getThisToolkitDir() + $pcapFilename;
			config
				placement: partitionColocation("NetflowCollector");
		}

		/* for debugging allow to pass only one file name tuple */
		stream<I> PcapFileStream2 as O = Custom(PcapFileStream as I) {
			logic
				state : {
					boolean runOnce = $runOnce;
					mutable boolean done = false;
				}
				onTuple I : {
					if ( ( ! runOnce ) || ( ! done )) {
						printStringLn("pcapFilename : " +(rstring) pcapFilename) ;
						submit(I, O);
						done = true;
					}
				}
				config
					placement: partitionColocation("NetflowCollector");
		}

		/* read the pcap file */
		stream<PacketType> PacketStream as Out = PacketFileSource(PcapFileStream2) {
			param
				//pcapFilename: dataDirectory() + $pcapFilename;
				inputFilter: "udp port 2055";
				metricsInterval: 0.0;
				output Out:
					captureTime = (float64)CAPTURE_SECONDS() + (float64)CAPTURE_MICROSECONDS() / 1000000.0,
					netflowSource = IPV4_SRC_ADDRESS(),
					netflowMessage = PAYLOAD_DATA();
				config
					placement: partitionColocation("NetflowCollector");
		}

		/**
		 * PacketLiveSource is an operator for the IBM Streams product that captures live network 
		 * packets from an ethernet interface, parses their network headers, and emits tuples 
		 * containing packet data. The operator may be configured with one or more output ports, 
		 * and each port may be configured to emit different tuples, as specified by output filters. 
		 * The tuples may contain the entire packet, the payload portion of the packet, or 
		 * individual fields from the network headers, as specified by output attribute assignments. 
	 
		stream<PacketType> PacketStream1 as Out = PacketLiveSource()
		{
			param
				networkInterface : $networkInterface ;
				
				// This optional parameter metricsInterval takes an expression of type float64 that specifies the interval, in seconds, for sending operator metrics to the Streams runtime. If the value is zero or less, the operator 
				// will not report metrics to the runtime, and the output assigment functions for libpcap statistics will be zero.
				metricsInterval : 0.0 ;
				
				// This optional parameter inputFilter takes an expression of type rstring that specifies which input packets 
				// should be processed. The value of this string must be a valid PCAP filter expression.
				//	inputFilter : "udp port 2055" ;
	
			output
				Out :
				// The function float64)CAPTURE_SECONDS() returns the number of microseconds since the value of the CAPTURE_SECONDS() function until the current packet was captured, according to the system clock on the machine that captured it.
				// The function float64 CAPTURE_MICROSECONDS() returns the number of seconds since the beginning of the Unix epoch (midnight on January 1st, 1970 in Greenwich, England) until the current packet was captured, according to the system clock on the machine that captured it.
				captureTime =(float64) CAPTURE_SECONDS() +(float64) CAPTURE_MICROSECONDS() / 1000000.0,
	
				// The Native function uint32 IPV4_SRC_ADDRESS() returns the IP version 4 source address of the current packet, 
				// if it has one, or zero otherwise.
				netflowSource = IPV4_SRC_ADDRESS(),
	
				// The Native function blob PAYLOAD_DATA() returns the payload data in the current packet, 
				// excluding all network headers. Note that the data may have been truncated when the packet was captured.
				netflowMessage = PAYLOAD_DATA() ;
		}
			
	
		 
		() as PacketSink = FileSink(PacketStream)
		{
			logic
				onTuple PacketStream : printStringLn("PacketStream  : " +(rstring) PacketStream) ;
			param
				file : dataDirectory() + "/PacketStream.out" ;
				format : txt ;
				hasDelayField : true ;
				flush : 1u ;
		}
		*/
	
		/** NetflowMessageParser is an operator for the IBM Streams product that parses individual 
		 * fields of Netflow messages received in input tuples, and emits tuples containing message 
		 * data. The operator may be configured with one or more output ports, and each port 
		 * may be configured to emit different tuples, as specified by output filters. 
		 * The tuples contain individual fields from the input message, as specified by 
		 * output attribute assignments.	
		*/
		stream<FlowType> FlowStream as Out = NetflowMessageParser(PacketStream) {
			param
				messageAttribute : netflowMessage ;
				sourceAttribute : netflowSource ;
			output
				Out :
					// https://www.ibm.com/support/knowledgecenter/fi/SSCRJU_4.2.1/com.ibm.streams.toolkits.doc/spldoc/dita/tk$com.ibm.streamsx.network/ns$com.ibm.streamsx.network.parse.html
					time_stamp		= NETFLOW_UNIX_SECONDS(), // returns the time that the current message was sent, in seconds
					srcAddress 		= NETFLOW_IPV4_SRC_ADDR(), 
					srcPort 		= NETFLOW_SRC_PORT(), 
					dstAddress 		= NETFLOW_IPV4_DST_ADDR(), 
					dstPort 		= NETFLOW_DST_PORT(),
					flowProtocol 	= NETFLOW_PROTOCOL(), 
					flowDuration 	= ((float64)NETFLOW_LAST_SWITCHED() - (float64)NETFLOW_FIRST_SWITCHED()) / 1000.0, 
					flowSize 		= NETFLOW_IN_BYTES() ;
			config
				placement: partitionColocation("NetflowCollector");
		}
	
		/* aggregate by groups srcAddress, dstAddress, */
		stream<FlowType> AggregateStream as O = Aggregate(FlowStream as I) {
			window
				I: tumbling, time($aggretationTime);
			param
				groupBy: srcAddress, dstAddress;
			output
				O : flowDuration = Sum(flowDuration),
					flowSize = Sum(flowSize);
			config
				placement: partitionColocation("NetflowCollector");
		}

		/* concatenate the transmission data
		 * build a list tuple for each window; limit size to $transmissionBurstTupleCount
		 */
		stream<TransferType> AggregateStream2 as O = Custom(AggregateStream as I) {
			logic
				state : mutable list<FlowType> theList = [];
				onTuple I : {
					appendM(theList, I);
					if (size(theList) >= $transmissionBurstTupleCount) {
						submit({flowItems = theList}, O);
						clearM(theList);
					}
				}
				onPunct I : {
					if (size(theList) > 0) {
						submit({flowItems = theList}, O);
						clearM(theList);
					}
				}
			config
				placement: partitionColocation("NetflowCollector");
		}

		/* serialize the tuple for an effective line format */
		stream<uint64 sequence, blob binData> SerializedStream as O = Serializer(AggregateStream2 as I) {
			param
				iterateTypeListCount: $iterateTypeListCount;
			output
				O: binData = serialized(),
				sequence = sequence();
			config
				placement: partitionColocation("NetflowCollector");
		}

		/* the controller operator need a pace maker */
		stream<uint64 iteration> PaceMakerStream as O = Beacon() {
			param
				period: 1.0;
			output
				O : iteration = IterationCount();
			config
				placement: partitionColocation("NetflowCollector");
		}
		
		/* Controler operator maintains the list with the packages to transfer */
		stream<uint64 sequence, blob binData> TransferStream as O = Custom(
				SerializedStream as I;
				PaceMakerStream as PM;
				HTTPResponseStream2 as RET) {
			logic
				state : {
					int32 maxQueueSize = $maxQueueSize;
					mutable list<tuple<uint64 sequence, blob binData>> inputQueue = [];
					mutable boolean transmissionInProgress = false;
					boolean dummy = createMyMetrics(); //create the metric during initialization
				}
				onTuple I : {
					if (size(inputQueue) >= maxQueueSize) {
						appTrc(Trace.error, "Queue max size (" + (rstring)maxQueueSize + ")  reached. Tuple with sequence "
							+ (rstring)sequence + " dropped.");
						//drop oldest tuple 
						removeM(inputQueue, 0);
						appendM(inputQueue, I);
						setCustomMetricValue("nInputTuplesQueued", (int64)size(inputQueue));
						mutable int64 tuplesDropped = 0l;
						getCustomMetricValue("nInputTuplesDropped", tuplesDropped);
						++tuplesDropped;
						setCustomMetricValue("nInputTuplesDropped", tuplesDropped);
					} else {
						appendM(inputQueue, I);
						setCustomMetricValue("nInputTuplesQueued", (int64)size(inputQueue));
					}
				}
				onTuple PM : {
					if ((size(inputQueue) > 0) && ! transmissionInProgress) {
						transmissionInProgress = true;
						submit(inputQueue[0], O);
					}
				}
				onTuple RET : {
					if (! transmissionInProgress) {
						appTrc(Trace.error, "Severe error RET received but no transmissionInProgress");
					} else {
						if (size(inputQueue) == 0) {
							appTrc(Trace.error, "Severe error sequence queue size is zero");
							transmissionInProgress = false;
						} else {
							if (inputQueue[0].sequence != RET.sequence) {
								appTrc(Trace.info, "Sequence from RET not matching inputQueue[0].sequence="
									+ (rstring)inputQueue[0].sequence + " RET.sequence=" + (rstring)RET.sequence
									+ " Tuples dropped.");
							}
							if ((err != "") || (stat < 200) || (stat > 299)) {
								if ( ! isShutdown()) {
									appTrc(Trace.warn, "Repeat transmission sequence=" + (rstring)inputQueue[0].sequence);
									submit(inputQueue[0], O);
								}
							} else {
								removeM(inputQueue, 0);
								setCustomMetricValue("nInputTuplesQueued", (int64)size(inputQueue));
								transmissionInProgress = false;
								if (size(inputQueue) > 0) {
									transmissionInProgress = true;
									submit(inputQueue[0], O);
								}
							}
						}
					}
				}
			config
				placement: partitionColocation("NetflowCollector");
		}

		/* send collection data to netflow viewer 
		 * to avoid deadlocks in the feedback loop, put this in a separate pe */
		stream<HTTPResponseType> HTTPResponseStream = HTTPRequest(TransferStream) {
			param
				fixedUrl: $url;
				fixedMethod: POST;
				outputBody : "respData";
				outputStatus : "status";
				outputStatusCode : "stat";
				outputContentEncoding : "contentEncoding";
				outputContentType : "contentType";
				outputHeader : "responseHeader";
				errorDiagnostics : "err";
				fixedContentType : "application/octet-stream";
				requestBodyAttributeBin : "binData";
				sslAcceptAllCertificates: true;
			config
				placement: partitionColocation("NetflowCollector");
		}

		/* Log the results */
		stream<I> HTTPResponseStream2 as O = Custom(HTTPResponseStream as I) {
			logic
				state : float64 waitBerforeTransmissionRepetition = $waitBerforeTransmissionRepetition;
				onTuple I : {
					if ((err != "") || (stat < 200) || (stat > 299)) {
						appTrc(Trace.error, "HTTPResponse : " +(rstring)I) ;
						block(waitBerforeTransmissionRepetition);
					} else {
						appTrc(Trace.info, "HTTPStatus : " +status + " sequence : " + (rstring)sequence);
					}
					submit(I, O);
				}
				config
					//Introduce queue here to make a new thread context for the feedback loop
					threadedPort : queue(I, Sys.Wait, 10);
					placement: partitionColocation("NetflowCollector");
		}
}
